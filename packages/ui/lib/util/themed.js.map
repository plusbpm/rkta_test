{"version":3,"sources":["../../src/util/themed.tsx"],"names":["themed","name","Component","css","props","theme","ownCss","Array","isArray","thunk","payload","styles","nextProps","cssEmotion","initialStyle","keys","Object","i","length","key","value","push"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;AAQA,SAASA,MAAT,CAAgBC,IAAhB,EAA8BC,SAA9B,EAAoE;AAClE,SAAO,gBAAiD;AAAA,QAA9CC,GAA8C,QAA9CA,GAA8C;AAAA,QAAtCC,KAAsC;;AAAA,8BACpC,sCADoC;AAAA,QAC9CC,KAD8C,uBAC9CA,KAD8C;;AAEtD,QAAMC,MAAM,GAAGC,KAAK,CAACC,OAAN,CAAcL,GAAd,IAAqBA,GAArB,GAA2B,CAACA,GAAD,CAA1C;;AACA,QAAMM,KAAK,GAAG,SAARA,KAAQ,CAACC,OAAD,EAAkC;AAC9C,UAAI,OAAOA,OAAP,KAAmB,UAAvB,EAAmC,OAAOD,KAAK,CAACC,OAAO,CAACL,KAAD,oBAAaD,KAAb;AAAoBD,QAAAA,GAAG,EAAHA;AAApB,SAAR,CAAZ;AACnC,aAAOO,OAAP;AACD,KAHD;;AAIA,QAAMC,MAA2B,GAAGN,KAAK,CAACJ,IAAD,CAAL,IAAe,EAAnD;AACA,QAAMW,SAAqB,GAAG;AAAET,MAAAA,GAAG,EAAHA;AAAF,KAA9B;AACA,QAAMU,UAAwB,GAAG,CAACJ,KAAK,CAACE,MAAM,CAACG,YAAR,CAAN,CAAjC;AACA,QAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYX,KAAZ,CAAb;;AACA,SAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,IAAI,CAAtC,EAAyC;AACvC,UAAME,GAAG,GAAGJ,IAAI,CAACE,CAAD,CAAhB;AACA,UAAMG,KAAK,GAAGhB,KAAK,CAACe,GAAD,CAAnB;;AACA,UAAIA,GAAG,IAAIR,MAAX,EAAmB;AACjB,YAAIS,KAAK,KAAK,KAAd,EAAqBP,UAAU,CAACQ,IAAX,CAAgBZ,KAAK,CAACE,MAAM,CAACQ,GAAD,CAAP,CAArB;AACtB,OAFD,MAEO;AACLP,QAAAA,SAAS,CAACO,GAAD,CAAT,GAAiBC,KAAjB;AACD;AACF;;AACD,SAAK,IAAIH,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGX,MAAM,CAACY,MAA3B,EAAmCD,EAAC,IAAI,CAAxC,EAA2C;AACzCJ,MAAAA,UAAU,CAACQ,IAAX,CAAgBZ,KAAK,CAACH,MAAM,CAACW,EAAD,CAAP,CAArB;AACD;;AACD,WAAO,gCAAC,SAAD,eAAeL,SAAf;AAA0B,MAAA,GAAG,EAAEC;AAA/B,OAAP;AACD,GAxBD;AAyBD;;eAEcb,M","sourcesContent":["import React, { ReactElement, SFC } from 'react';\nimport useProviderContext from '../Provider/useProviderContext';\nimport {\n  CssEmotion,\n  CssRkta,\n  RktaComponentStyles,\n  RktaThemed,\n} from '../Provider/theme/theme.types';\n\nfunction themed(name: string, Component: Function): SFC<RktaThemed> {\n  return ({ css, ...props }: RktaThemed): ReactElement => {\n    const { theme } = useProviderContext();\n    const ownCss = Array.isArray(css) ? css : [css];\n    const thunk = (payload: CssRkta): CssEmotion => {\n      if (typeof payload === 'function') return thunk(payload(theme, { ...props, css }));\n      return payload;\n    };\n    const styles: RktaComponentStyles = theme[name] || {};\n    const nextProps: RktaThemed = { css };\n    const cssEmotion: CssEmotion[] = [thunk(styles.initialStyle)];\n    const keys = Object.keys(props);\n    for (let i = 0; i < keys.length; i += 1) {\n      const key = keys[i];\n      const value = props[key];\n      if (key in styles) {\n        if (value !== false) cssEmotion.push(thunk(styles[key]));\n      } else {\n        nextProps[key] = value;\n      }\n    }\n    for (let i = 0; i < ownCss.length; i += 1) {\n      cssEmotion.push(thunk(ownCss[i]));\n    }\n    return <Component {...nextProps} css={cssEmotion} />;\n  };\n}\n\nexport default themed;\n"],"file":"themed.js"}