{"version":3,"sources":["../../src/Heading/Heading.tsx"],"names":["getHeaderProps","level","rest","element","Header"],"mappings":";;;;;;;AAAA;;AAEA;;;;;;;;;;;;AAaA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAAgBC,IAAhB,EAAoD;AACzE,MAAID,KAAK,IAAI,CAAT,IAAcA,KAAK,IAAI,CAA3B,EAA8B;AAC5B,QAAME,OAAO,cAAOF,KAAP,CAAb;AACA;AAASE,MAAAA,OAAO,EAAPA;AAAT,OAAqBD,IAArB,sBAA4BC,OAA5B,EAAgD,IAAhD;AACD;;AACD;AAASA,IAAAA,OAAO,EAAE;AAAlB,KAA+BD,IAA/B;AACD,CAND;;AAQA,IAAME,MAAM,GAAG,SAATA,MAAS;AAAA,MAAGH,KAAH,QAAGA,KAAH;AAAA,MAAaC,IAAb;;AAAA,SACb,gCAAC,gBAAD,EAAUF,cAAc,CAACC,KAAD,EAAQC,IAAR,CAAxB,CADa;AAAA,CAAf;;eAIeE,M","sourcesContent":["import React from 'react';\n\nimport Text from '../Text';\nimport { Props as TextProps } from '../Text/Text';\n\nexport interface Props extends TextProps {\n  level: 1 | 2 | 3 | 4 | 5 | 6;\n  h1?: never;\n  h2?: never;\n  h3?: never;\n  h4?: never;\n  h5?: never;\n  h6?: never;\n}\n\nconst getHeaderProps = (level: number, rest: Partial<Props>): TextProps => {\n  if (level >= 1 && level <= 6) {\n    const element = `h${level}` as React.ElementType;\n    return { element, ...rest, [element as string]: true };\n  }\n  return { element: 'header', ...rest };\n};\n\nconst Header = ({ level, ...rest }: Props): React.ReactNode => (\n  <Text {...getHeaderProps(level, rest)} />\n);\n\nexport default Header;\n"],"file":"Heading.js"}